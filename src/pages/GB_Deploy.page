<apex:page controller="GB_Deploy">
    <style>
        pre { font-family: 'Consolas'};
        table td,th {padding: 3px;}
        .gb_deploy_table td, th {
            font-family: 'Consolas';
            vertical-align: middle;
        }
        .gb_deploy_table th { text-align: center; }
        .gb_deploy_table td.date {
            min-width: 11em;
        }
        .gb_deploy_table td a { cursor: pointer; }
        .gb_deploy_table tr:hover { background-color: #E1F4FF; }
        .gb_deploy_table ol { padding: 0px; }
        .gb_deploy_table .upload_input { opacity: 0; }
        .gb_deploy_table .upload_label { cursor: pointer; }
    </style>

    <a id="download_link" href="" style="display:none;"></a>
    <apex:form>
        <table class="gb_deploy_table">
            <tr>
                <th>Name</th>
                <th>LastModifiedBy</th>
                <th>LastModifiedDate</th>
                <th>Actions</th>
            </tr>

            <apex:repeat value="{!SettingsList}" var="s">
            <tr>
                <td>
                    <a href="" onclick="injectContent(this, '{!s.Id}', 'Setting', '{!s.Name}.json')">{!s.Name}</a>
                    <label class="upload_label" for="input_{!s.Id}">#</label>
                    <input class="upload_input" id="input_{!s.Id}" type="file" data-sfid="{!s.Id}" onChange="onFileSelectChanged(this)"/>
                </td>
                <td>{!s.Rec.LastModifiedBy.Name}</td>
                <td class="date">{!s.LastModifiedDate}</td>
                <td>
                    <ol>
                    <apex:repeat value="{!s.Actions}" var="mc">
                    <li><a href="" onclick="injectContent(this, '{!mc.Id}', 'Meta', '{!mc.Name}.json')">{!mc.Name}</a></li>
                    </apex:repeat>
                    </ol>
                </td>
            </tr>
            </apex:repeat>
        </table>
    </apex:form>

    <script>
        function unescapeJSON(str) {
            let json = JSON.parse(str.replace(/\\\"/g, "\""));
            return json;
        }
        function escapeJSON(json) {
            return JSON.stringify(json, null, 0).replace(/\"/g,"\"");
        }

        function convertFullObject(def) {
            if (def.adminFieldProperties && def.adminFieldProperties !== '')
                def.adminFieldProperties = unescapeJSON(def.adminFieldProperties);
            if (def.charts && def.charts !== '')
                def.charts = unescapeJSON(def.charts);
            if (def.colorCoding && def.colorCoding !== '')
                def.colorCoding = unescapeJSON(def.colorCoding);
            if (def.crudSettings && def.crudSettings !== '')
                def.crudSettings = unescapeJSON(def.crudSettings);
            if (def.fieldProperties && def.fieldProperties !== '')
                def.fieldProperties = unescapeJSON(def.fieldProperties);
            if (def.relationships && def.relationships !== '')
                def.relationships = unescapeJSON(def.relationships);
            
            return def;
        }

        function prettifyBase64EncodedJSON(base64JsonString) {
            let json = JSON.parse(window.atob(base64JsonString));
            json = convertFullObject(json);
            return window.btoa(JSON.stringify(json, null, 2));
        }
        
        //function injectContent(sender, contentBase64) {
        //    let content = prettifyBase64EncodedJSON(contentBase64);

        //    sender.href = `data:text/plain;base64,${content}`;
        //    return true;
        //}

        function injectContent(sender, sfId, sfType, name) {
            getBase64Content(sfId, sfType, res => {
                let link = document.getElementById('download_link');

                //console.log(res);
                let content = res;
                if (sfType === 'Setting') {
                    content = prettifyBase64EncodedJSON(content);
                }
                
                link.href = `data:text/plain;base64,${content}`;
                link.download = name;
                link.click();
                console.log('download finished.');
            });

            console.log('download started.');
            return false;
        }

        //function getSiblingLink(el) {
        //    return el.parentElement.querySelector('a');
        //}

        function getBase64Content(sfId, sfType, callback) {
            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.GB_Deploy.getBase64ContentByIdAndType}',
                sfId,
                sfType,
                (res, evt) => {
                    //console.log('result:', res, evt);
                    callback(res);
                }
            );
        }


        // ---- UPLOAD ----

        function arrayBufferToString(arrBuff) {
            let text = '',
                bytes = new Uint8Array(arrBuff);
            for (let ii = 0; ii < bytes.byteLength; ii++) {
                text += String.fromCharCode(bytes[ii]);
            }
            return text;
        }

        function readFile(file, callback) {
            let fileReader = new FileReader();
            fileReader.onload = (onLoadRes) => {
                if (onLoadRes.target.readyState == FileReader.DONE) {
                    callback({ content : arrayBufferToString(onLoadRes.target.result) });
                }
            }
            fileReader.onprogress = (e) => {}
            fileReader.readAsArrayBuffer(file);
        }

        function onFileSelectChanged(sender) {
            let sfid = sender.getAttribute('data-sfid');
            
            if (sender.files.length > 0) {
                readFile(sender.files[0], res => {
                    let json = JSON.parse(res.content);
                    json.adminFieldProperties = JSON.stringify(json.adminFieldProperties, null, 0).replace(/\"/g,"\"");
                    json.charts = JSON.stringify(json.charts, null, 0).replace(/\"/g,"\"");
                    json.colorCoding = JSON.stringify(json.colorCoding, null, 0).replace(/\"/g,"\"");
                    json.crudSettings = JSON.stringify(json.crudSettings, null, 0).replace(/\"/g,"\"");
                    json.fieldProperties = JSON.stringify(json.fieldProperties, null, 0).replace(/\"/g,"\"");
                    json.relationships = JSON.stringify(json.relationships, null, 0).replace(/\"/g,"\"");

                    //console.log('content:', json);
                    let content = window.btoa(JSON.stringify(json, null, 0));
                    //console.log('content:', content);
                    //console.log('sfid:', sfid);
                    
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.GB_Deploy.updateSetting}',
                        sfid,
                        content, 
                        (res, evt) => {
                            console.log(res, evt);
                        }
                    );
                });
            }
        }
    </script>
</apex:page>